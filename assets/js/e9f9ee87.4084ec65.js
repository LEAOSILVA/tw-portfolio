"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4303],{2034:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/https-diagrama-87333a89d3852e19e16ce71c828e5c28.gif"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9164:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"docs-example/use-case","title":"Use case","description":"This use case demonstrates a real-world scenario in systems integrations for payment management. It provides clear guidance that helps customers understand the process and apply it effectively.","source":"@site/docs/docs-example/use-case.md","sourceDirName":"docs-example","slug":"/docs-example/use-case","permalink":"/tw-portfolio/docs/docs-example/use-case","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs-example/use-case.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docsSidebar","previous":{"title":"Tutorial","permalink":"/tw-portfolio/docs/docs-example/tutorials"},"next":{"title":"UX writing","permalink":"/tw-portfolio/docs/docs-example/ux-writing"}}');var a=s(4848),i=s(8453);const r={sidebar_position:7},o="Use case",l={},c=[{value:"Payment management",id:"payment-management",level:2},{value:"Diagram",id:"diagram",level:3},{value:"Description of the steps",id:"description-of-the-steps",level:3},{value:"Order reception",id:"order-reception",level:4},{value:"Purchase information retrieval",id:"purchase-information-retrieval",level:4},{value:"Data transformation",id:"data-transformation",level:4},{value:"Payment processing",id:"payment-processing",level:4},{value:"Status update",id:"status-update",level:4},{value:"Final response",id:"final-response",level:4},{value:"Source Code",id:"source-code",level:3}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"use-case",children:"Use case"})}),"\n",(0,a.jsx)(n.p,{children:"This use case demonstrates a real-world scenario in systems integrations for payment management. It provides clear guidance that helps customers understand the process and apply it effectively."}),"\n",(0,a.jsx)(n.h2,{id:"payment-management",children:"Payment management"}),"\n",(0,a.jsx)(n.p,{children:"In the context of an e-commerce purchase, consider an integration flow that manages the payment processing through the following steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Order reception"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Purchase information retrieval"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Data transformation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Payment processing"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Status update"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Final response"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"diagram",children:"Diagram"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Diagram",src:s(2034).A+"",width:"1844",height:"930"})}),"\n",(0,a.jsx)(n.h3,{id:"description-of-the-steps",children:"Description of the steps"}),"\n",(0,a.jsx)(n.p,{children:"Check the description of each step of the integration flow:"}),"\n",(0,a.jsx)(n.h4,{id:"order-reception",children:"Order reception"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The flow begins when an order is received with an identification code (ClientID)."}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"POST"})," request is forwarded to the ",(0,a.jsx)(n.code,{children:"/simple"})," endpoint."]}),"\n",(0,a.jsx)(n.li,{children:"Then, the response to the request is logged."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'- from:\n    uri: rest:post:/simple\n- setProperty:\n    expression:\n      simple:\n        expression: ${header[ClientID]}   \n    name: "clientID"\n- log:\n    message: ${exchangeProperty.clientID}\n----\n'})}),"\n",(0,a.jsx)(n.h4,{id:"purchase-information-retrieval",children:"Purchase information retrieval"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"With the ClientID, the system queries an internal service for more details."}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"GET"})," request is made to the shopping endpoint, passing the ClientID as a parameter."]}),"\n",(0,a.jsx)(n.li,{children:"Then, the response to the request is logged."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- toD:\n    uri: https://{{URL}}/internal/purchases\n    parameters:\n        bridgeEndpoint: true\n        httpMethod: GET\n        ClientID: '${exchangeProperty.clientID}'\n- log:\n    message: 'PURCHASES - ${body}'\n"})}),"\n",(0,a.jsx)(n.h4,{id:"data-transformation",children:"Data transformation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The information is then processed and formatted using a transformation tool, JSONata."}),"\n",(0,a.jsx)(n.li,{children:"The resulting body is logged for verification."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- to:\n    uri: jsonata:classpath:extractTotal.jsonata\n    parameters:\n       inputType: JsonString\n- log:\n    message: 'TRANSFORMATION - ${body}'\n"})}),"\n",(0,a.jsxs)(n.admonition,{title:"IMPORTANT",type:"important",children:[(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The instructions for creating a new JSON object are in the ",(0,a.jsx)(n.code,{children:"extractTotal.jsonata"})," file, available in the ",(0,a.jsx)(n.em,{children:"Resources"})," folder."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"extractTotal.jsonata"})," file is referenced in the flow script along with the classpath (snippet above)."]}),"\n",(0,a.jsxs)(n.li,{children:["See below the content of the ",(0,a.jsx)(n.code,{children:"extractTotal.jsonata"})," file:"]}),"\n"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'{\n   "Account": Client.Account,\n   "TypePayment": Client.TypePayment,\n   "Value": $sum(Client.Orders.Product.(Price * Quantity))\n}\n'})})]}),"\n",(0,a.jsx)(n.admonition,{title:"NOTE",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"See how to create a file in the Resources folder."}),"\n"]})}),"\n",(0,a.jsx)(n.h4,{id:"payment-processing",children:"Payment processing"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The data is then sent to an external service to make the payment."}),"\n",(0,a.jsx)(n.li,{children:"The transformed message body is converted to JSON format."}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"Content-Type"})," header (set to application/json) and the ",(0,a.jsx)(n.code,{children:"Authorization"})," header (with an example token) are configured."]}),"\n",(0,a.jsxs)(n.li,{children:["A ",(0,a.jsx)(n.code,{children:"POST"})," request is then made to the payment endpoint."]}),"\n",(0,a.jsx)(n.li,{children:"The response is logged."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- marshal:\n    json:\n       library: Jackson\n- setHeader:\n    expression:\n      constant:\n        expression: application/json\n    name: Content-Type\n- setHeader:\n    expression:\n      constant:\n        expression: 'Bearer AuthorizationTokenExample'\n    name: Authorization\n- toD:\n    uri: https://{{URL}}/external/payment\n    parameters:\n        bridgeEndpoint: true\n        httpMethod: POST\n- log:\n    message: 'PAYMENT - ${body}'\n"})}),"\n",(0,a.jsx)(n.h4,{id:"status-update",children:"Status update"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"After the payment is processed, the result is combined with the ClientID and transformed again to update the payment status in an internal service."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The adjusted message body is converted to JSON format and sent in a ",(0,a.jsx)(n.code,{children:"POST"})," request to the status endpoint."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- setBody:\n    expression:\n      simple:\n        expression: '{\"ClientID\": \"${exchangeProperty.clientID}\", \"status\":${body}}'\n- log:\n    message: 'CONCATENATION - ${body}'\n- to:\n    uri: jsonata:classpath:statusPayload.jsonata\n    parameters:\n       inputType: JsonString\n- log:\n    message: 'STATUS PAYLOAD - ${body}'\n- marshal:\n    json:\n       library: Jackson\n- setHeader:\n    expression:\n      constant:\n        expression: application/json\n    name: Content-Type\n- toD:\n    uri: https://{{URL}}/internal/status\n    parameters:\n        bridgeEndpoint: true\n        httpMethod: POST\n"})}),"\n",(0,a.jsxs)(n.admonition,{title:"IMPORTANT",type:"important",children:[(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The instructions for creating a new JSON object are in the ",(0,a.jsx)(n.code,{children:"statusPayload.jsonata"})," file, available in the ",(0,a.jsx)(n.em,{children:"Resources"})," folder."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"statusPayload.jsonata"})," file is referenced in the flow script along with the classpath (snippet above)."]}),"\n",(0,a.jsxs)(n.li,{children:["See below the content of the ",(0,a.jsx)(n.code,{children:"statusPayload.jsonata"})," file:"]}),"\n"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'{\n    "ClientID": ClientID,\n    "Status":status.status\n}\n'})})]}),"\n",(0,a.jsx)(n.admonition,{title:"NOTE",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"See how to create a file in the Resources folder."}),"\n"]})}),"\n",(0,a.jsx)(n.h4,{id:"final-response",children:"Final response"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The system sends a final confirmation to indicate that the payment was successful."}),"\n",(0,a.jsxs)(n.li,{children:["The HTTP response code is set to ",(0,a.jsx)(n.code,{children:"200"}),", and the response body confirms the success of the operation."]}),"\n",(0,a.jsx)(n.li,{children:"Additionally, the content of the final response is logged."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'- setHeader:\n    expression:\n      constant:\n        expression: "200"\n    name: CamelHttpResponseCode\n- setBody:\n    expression:\n      simple:\n        expression: \'{"success": "true"}\'\n- log:\n    message: ${body}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"source-code",children:"Source Code"}),"\n",(0,a.jsx)(n.p,{children:"Consult below the complete script for the integration flow:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- from:\n    uri: rest:post:/simple  # Defines a REST endpoint that receives POST requests at the /simple route\n    steps:\n       - setProperty:\n           expression:\n             simple:\n               expression: ${header[ClientID]}  # Stores the value of the 'ClientID' header in an exchange property called 'clientID'\n           name: \"clientID\"\n       - log:\n          message: ${exchangeProperty.clientID}  # Logs the value of the 'clientID' property for debugging\n       - toD:\n          uri: https://{{URL}}/internal/purchases  # Makes a GET request to the internal purchases endpoint\n          parameters:\n              bridgeEndpoint: true\n              httpMethod: GET\n              ClientID: '${exchangeProperty.clientID}'  # Passes the 'clientID' as a parameter in the request\n       - log:\n          message: 'PURCHASES - ${body}'  # Logs the response from the purchases request\n       - to:\n            uri: jsonata:classpath:extractTotal.jsonata  # Processes the response using a JSONata transformation to extract the total\n            parameters:\n               inputType: JsonString\n       - log:\n            message: 'TRANSFORMATION - ${body}'  # Logs the result of the JSONata transformation\n       - marshal:\n            json:\n               library: Jackson  # Converts the message body to JSON using Jackson\n       - setHeader:\n            expression:\n              constant:\n                expression: application/json  # Sets the 'Content-Type' header to 'application/json'\n            name: Content-Type\n       - setHeader:\n            expression:\n              constant:\n                expression: 'Bearer AuthorizationTokenExample'  # Sets the 'Authorization' header with an example token\n            name: Authorization\n       - toD:\n          uri: https://{{URL}}/external/payment  # Sends data to the external payment service via POST\n          parameters:\n              bridgeEndpoint: true\n              httpMethod: POST\n       - log:\n          message: 'PAYMENT - ${body}'  # Logs the response from the payment service\n       - setBody:\n          expression:\n            simple:\n              expression: '{\"ClientID\": \"${exchangeProperty.clientID}\", \"status\":${body}}'  # Builds a new JSON body with 'clientID' and the payment status\n       - log:\n          message: 'CONCATENATION - ${body}'  # Logs the message body after concatenation\n       - to:\n            uri: jsonata:classpath:statusPayload.jsonata  # Applies a JSONata transformation to format the status payload\n            parameters:\n               inputType: JsonString\n       - log:\n            message: 'STATUS PAYLOAD - ${body}'  # Logs the generated status payload\n       - marshal:\n            json:\n               library: Jackson  # Converts back to JSON\n       - setHeader:\n            expression:\n              constant:\n                expression: application/json  # Sets the 'Content-Type' header to 'application/json' again\n            name: Content-Type\n       - toD:\n          uri: https://{{URL}}/internal/status  # Sends the processed status to an internal service\n          parameters:\n              bridgeEndpoint: true\n              httpMethod: POST\n       - setHeader:\n          expression:\n            constant:\n                expression: \"200\"  # Sets the HTTP response code to 200 (OK)\n          name: CamelHttpResponseCode\n       - setBody:\n          expression:\n            simple:\n              expression: '{\"success\": \"true\"}'  # Sets the final API response indicating success\n       - log:\n          message: ${body}  # Logs the final response\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);